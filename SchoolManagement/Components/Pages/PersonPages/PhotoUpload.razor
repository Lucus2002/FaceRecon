@page "/photo"
@using Microsoft.EntityFrameworkCore
@using Microsoft.FluentUI.AspNetCore.Components
@using SchoolManagementApp.Models
@using SchoolManagementApp.Services
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.PixelFormats

@inject IDbContextFactory<SchoolManagementApp.Data.SchoolManagementDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IFaceEmbeddingService FaceEmbeddingService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@implements IAsyncDisposable

@if (Person == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>Upload Photo for @Person.Name</h4>

    <FluentButton Appearance="Appearance.Accent">
        Choose File
    </FluentButton>
    <FluentInputFile OnInputFileChange="OnFileSelected"
                     Accept="image/*"
                     Multiple="true" />

    <FluentButton @onclick="UploadPhotoAsync"
                  Disabled="@(!SelectedFiles.Any() || isProcessing)"
                  Class="ms-2"
                  Appearance="Appearance.Accent">
        @(isProcessing ? "Processing..." : "Upload")
    </FluentButton>

    @for (int i = 0; i < ImagePreviews.Count; i++)
    {
        var index = i;
        <FluentCard Style="width: 220px; position: relative;">
            <img src="@ImagePreviews[index]" style="width: 100%; border-radius: 8px;" />
            <FluentButton Style="position: absolute; top: 6px; right: 6px; z-index: 10;"
                          Appearance="Appearance.Stealth"
                          OnClick="@(() => RemovePreview(index))">
                <i class="bi bi-trash"></i>
            </FluentButton>
            <div class="p-2 text-center">
                <strong>Preview</strong>
            </div>
        </FluentCard>
    }
}

@code {
    [Parameter]
    public int PersonId { get; set; }

    private Person? Person;
    private List<IBrowserFile> SelectedFiles = new();
    private List<string> ImagePreviews = new();
    private List<string> UploadedPaths = new();
    private bool isProcessing = false;
    private CancellationTokenSource cts = new();

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Person = await context.Person.FindAsync(PersonId);
    }

    private async void OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            SelectedFiles = e.GetMultipleFiles().ToList();
            ImagePreviews.Clear();

            foreach (var file in SelectedFiles)
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64 = Convert.ToBase64String(ms.ToArray());
                var imageUrl = $"data:{file.ContentType};base64,{base64}";
                ImagePreviews.Add(imageUrl);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing file selection: {ex.Message}");
        }
    }

    private async Task UploadPhotoAsync()
    {
        if (Person == null || !SelectedFiles.Any() || isProcessing)
            return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            using var context = DbFactory.CreateDbContext();
            var safeName = string.Join("_", Person.Name.Split(Path.GetInvalidFileNameChars()));
            var folderName = $"{Person.PersonID}_{safeName}";
            var relativeFolder = Path.Combine("images", folderName);
            var absoluteFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", relativeFolder);
            Directory.CreateDirectory(absoluteFolder);

            foreach (var file in SelectedFiles)
            {
                if (cts.IsCancellationRequested) break;

                var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
                var absolutePath = Path.Combine(absoluteFolder, uniqueFileName);
                var relativePath = Path.Combine(relativeFolder, uniqueFileName).Replace("\\", "/");

                try
                {
                    // Process image for embedding
                    await using var inputStream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
                    using var memoryStream = new MemoryStream();
                    await inputStream.CopyToAsync(memoryStream, cts.Token);
                    var imageBytes = memoryStream.ToArray();

                    // Generate embedding (silently continue if fails)
                    try
                    {
                        var embedding = FaceEmbeddingService.GenerateEmbedding(imageBytes);
                        // You can inspect embedding here via breakpoint
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Embedding generation failed: {ex.Message}");
                    }

                    // Process image for storage
                    memoryStream.Position = 0;
                    using var image = await Image.LoadAsync(memoryStream, cts.Token);
                    image.Mutate(x => x.Resize(300, 300));
                    await using var outputStream = new FileStream(absolutePath, FileMode.Create);
                    await image.SaveAsJpegAsync(outputStream, cts.Token);

                    context.PersonPhoto.Add(new PersonPhoto
                    {
                        PersonID = Person.PersonID,
                        Photopath = relativePath,
                        CreatedDate = DateTime.Now
                    });

                    UploadedPaths.Add("/" + relativePath);
                }
                catch (OperationCanceledException)
                {
                    // Clean up if operation was canceled
                    if (File.Exists(absolutePath))
                        File.Delete(absolutePath);
                    break;
                }
            }

            if (!cts.IsCancellationRequested)
            {
                await context.SaveChangesAsync(cts.Token);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Upload failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            if (!cts.IsCancellationRequested)
            {
                SelectedFiles.Clear();
                ImagePreviews.Clear();
                StateHasChanged();
            }
        }
    }

    private void RemovePreview(int index)
    {
        if (index >= 0 && index < ImagePreviews.Count && index < SelectedFiles.Count)
        {
            ImagePreviews.RemoveAt(index);
            SelectedFiles.RemoveAt(index);
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
    }
}